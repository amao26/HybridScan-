import React, { useState } from "react";
import {
  Typography,
  TextField,
  Button,
  Paper,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Box,
  InputAdornment,
  CircularProgress,
  Chip,
} from "@mui/material";
import {
  Key,
  Terminal,
  TaskAlt,
  GppGood,
  GppBad,
} from "@mui/icons-material";

export default function PrivEscPage({ updateTarget }) {
  const [os, setOs] = useState("");
  const [steps, setSteps] = useState([]);
  const [isChecking, setIsChecking] = useState(false);
  const [status, setStatus] = useState("Ready to check for vulnerabilities.");
  const [progress, setProgress] = useState(0);

  const privEscTechniques = [
    { name: "Kernel Exploits", delay: 2000, successChance: 0.1 },
    { name: "SUID/SGID Binaries", delay: 1500, successChance: 0.8 },
    { name: "Capabilities & Sudo", delay: 1200, successChance: 0.7 },
    { name: "Cron Jobs", delay: 1000, successChance: 0.5 },
    { name: "Password Reuse", delay: 800, successChance: 0.6 },
  ];

  const handleRun = () => {
    if (!os) {
      setStatus("Please enter a target OS (e.g., 'Linux').");
      return;
    }

    setIsChecking(true);
    setSteps([]);
    setProgress(0);
    setStatus(`Checking for privilege escalation vectors on ${os}...`);

    let completedChecks = 0;
    const totalChecks = privEscTechniques.length;
    const finalResults = [];

    privEscTechniques.forEach((technique, index) => {
      setTimeout(() => {
        const isVulnerable = Math.random() < technique.successChance;
        const result = {
          technique: technique.name,
          status: isVulnerable ? "Vulnerable" : "Not Vulnerable",
          details: isVulnerable
            ? `Found a vulnerability in ${technique.name}.`
            : `No known vulnerabilities found for ${technique.name}.`,
        };
        setSteps((prevSteps) => {
          const newSteps = [...prevSteps, result];
          // We need to capture the results as they are added to state to send them all at the end
          finalResults.push(result); 
          return newSteps;
        });

        completedChecks++;
        setProgress((completedChecks / totalChecks) * 100);

        if (completedChecks === totalChecks) {
          setIsChecking(false);
          setStatus(
            `Check complete. Found ${
              finalResults.filter((s) => s.status === "Vulnerable").length
            } potential vectors.`
          );
          // âœ… Pass the analysis results to the central state management
          updateTarget(os, "Privilege Escalation", finalResults);
        }
      }, (index + 1) * 750); // Simulating different check durations
    });
  };

  return (
    <div className="main">
      <Paper
        className="card"
        sx={{
          p: 4,
          mb: 3,
          backgroundColor: "var(--card)",
          border: "1px solid rgba(255,255,255,0.1)",
        }}
      >
        <Box display="flex" alignItems="center" mb={2}>
          <Key sx={{ color: "var(--accent)", mr: 1, fontSize: 32 }} />
          <Typography variant="h4" sx={{ color: "var(--text)", fontWeight: "bold" }}>
            Privilege Escalation Check
          </Typography>
        </Box>
        <Typography variant="body1" sx={{ color: "var(--text-light)", mb: 3 }}>
          {isChecking ? `Status: ${status}` : status}
        </Typography>

        <Box display="flex" gap={2} alignItems="center">
          <TextField
            label="Target OS (e.g., 'Linux' or 'Windows')"
            variant="outlined"
            fullWidth
            value={os}
            onChange={(e) => setOs(e.target.value)}
            disabled={isChecking}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Terminal sx={{ color: "var(--text-light)" }} />
                </InputAdornment>
              ),
            }}
            sx={{
              "& .MuiInputBase-root": {
                color: "var(--text)",
                backgroundColor: "var(--panel)",
                "& fieldset": { borderColor: "rgba(255,255,255,0.08)" },
                "&:hover fieldset": { borderColor: "var(--accent)" },
              },
              "& .MuiInputLabel-root": { color: "var(--text)" },
            }}
          />
          <Button
            variant="contained"
            onClick={handleRun}
            disabled={isChecking || !os}
            sx={{
              minWidth: 120,
              backgroundColor: "var(--accent)",
              color: "var(--bg)",
              "&:hover": { backgroundColor: "var(--accent-dark)" },
            }}
          >
            {isChecking ? (
              <CircularProgress size={24} sx={{ color: "var(--bg)" }} />
            ) : (
              "Run Check"
            )}
          </Button>
        </Box>

        {isChecking && (
          <Box mt={3}>
            <LinearProgress
              variant="determinate"
              value={progress}
              sx={{
                height: 8,
                borderRadius: 4,
                backgroundColor: "rgba(255,255,255,0.1)",
                "& .MuiLinearProgress-bar": {
                  backgroundColor: "var(--accent)",
                },
              }}
            />
            <Typography variant="caption" sx={{ color: "var(--text-light)", mt: 1, display: "block" }}>
              Scanning for common privilege escalation vectors... {progress.toFixed(0)}% Complete
            </Typography>
          </Box>
        )}
      </Paper>

      {steps.length > 0 && (
        <Paper
          className="card"
          sx={{
            p: 4,
            mt: 3,
            backgroundColor: "var(--card)",
            border: "1px solid rgba(255,255,255,0.1)",
          }}
        >
          <Typography variant="h5" gutterBottom sx={{ color: "var(--accent)" }}>
            Findings
          </Typography>
          <List>
            {steps.map((step, i) => (
              <ListItem key={i} sx={{ borderBottom: "1px solid rgba(255,255,255,0.05)", py: 2 }}>
                <ListItemIcon sx={{ minWidth: 40, color: "var(--text)" }}>
                  {step.status === "Vulnerable" ? (
                    <GppBad sx={{ color: "red" }} />
                  ) : (
                    <GppGood sx={{ color: "green" }} />
                  )}
                </ListItemIcon>
                <ListItemText
                  primary={
                    <Typography component="span" sx={{ display: "flex", alignItems: "center", fontWeight: "bold", color: "var(--text)" }}>
                      <Box component="span" mr={1}>{step.technique}</Box>
                      <Chip
                        label={step.status}
                        size="small"
                        sx={{
                          backgroundColor: step.status === "Vulnerable" ? "red" : "green",
                          color: "#fff",
                          textTransform: "capitalize",
                          fontWeight: "bold",
                        }}
                      />
                    </Typography>
                  }
                  secondary={
                    <Typography component="span" sx={{ color: "var(--text-light)", mt: 1, display: "block" }}>
                      {step.details}
                    </Typography>
                  }
                />
              </ListItem>
            ))}
          </List>
        </Paper>
      )}
    </div>
  );
}