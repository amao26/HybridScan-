import React, { useState } from "react";
import {
  Typography,
  Button,
  Paper,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Box,
  CircularProgress,
  Chip,
  TextField,
} from "@mui/material";
import {
  Security,
  ReportProblem,
  CheckCircleOutline,
  Info,
  History,
} from "@mui/icons-material";

export default function PostExPage({ updateTarget }) {
  const [report, setReport] = useState([]);
  const [isScanning, setIsScanning] = useState(false);
  const [status, setStatus] = useState("Ready to run security analysis.");
  const [progress, setProgress] = useState(0);
  const [target, setTarget] = useState("");

  const analysisChecks = [
    { name: "File Integrity Check", delay: 1500, statusChance: 0.8, type: "integrity" },
    { name: "System Logs Review", delay: 1000, statusChance: 0.2, type: "logs" },
    { name: "Network Connection Analysis", delay: 1200, statusChance: 0.5, type: "network" },
    { name: "Scheduled Tasks Audit", delay: 800, statusChance: 0.9, type: "tasks" },
    { name: "Rootkit Detection", delay: 2000, statusChance: 0.95, type: "rootkit" },
  ];

  const handleRunAnalysis = () => {
    if (!target) {
      setStatus("Please enter a target to analyze.");
      return;
    }
    setIsScanning(true);
    setReport([]);
    setProgress(0);
    setStatus("Initiating security analysis...");

    let completedChecks = 0;
    const totalChecks = analysisChecks.length;
    let analysisResults = [];

    // Simulate each analysis step with a delay
    analysisChecks.forEach((check, index) => {
      setTimeout(() => {
        const isSecure = Math.random() < check.statusChance;
        const result = {
          name: check.name,
          status: isSecure ? "Secure" : "Potential Threat",
          details: isSecure
            ? `No suspicious activity found during ${check.name.toLowerCase()}.`
            : `Suspicious activity detected. Manual review is recommended.`,
          icon: isSecure ? <CheckCircleOutline sx={{ color: "green" }} /> : <ReportProblem sx={{ color: "red" }} />,
        };
        analysisResults.push(result);
        setReport((prevReport) => [...prevReport, result]);

        completedChecks++;
        setProgress((completedChecks / totalChecks) * 100);

        if (completedChecks === totalChecks) {
          setIsScanning(false);
          setStatus("Analysis complete. Review the report below.");
          // âœ… Pass the analysis results to the central state management
          updateTarget(target, "Post-Exploitation", analysisResults);
        }
      }, (index) * 750 + 500); // Small initial delay + delay for each step
    });
  };

  return (
    <div className="main">
      <Paper
        className="card"
        sx={{
          p: 4,
          mb: 3,
          backgroundColor: "var(--card)",
          border: "1px solid rgba(255,255,255,0.1)",
        }}
      >
        <Box display="flex" alignItems="center" mb={2}>
          <Security sx={{ color: "var(--accent)", mr: 1, fontSize: 32 }} />
          <Typography variant="h4" sx={{ color: "var(--text)", fontWeight: "bold" }}>
            Post-Exploitation Analysis
          </Typography>
        </Box>
        <Typography variant="body1" sx={{ color: "var(--text-light)", mb: 3 }}>
          {isScanning ? `Status: ${status}` : status}
        </Typography>

        <Box sx={{ mb: 2 }}>
          <TextField
            fullWidth
            label="Target or Session ID"
            value={target}
            onChange={(e) => setTarget(e.target.value)}
            disabled={isScanning}
            sx={{
              "& .MuiInputBase-root": { color: "var(--text)", backgroundColor: "var(--panel)" },
              "& .MuiInputLabel-root": { color: "var(--muted)" },
            }}
          />
        </Box>

        <Box display="flex" justifyContent="center">
          <Button
            variant="contained"
            onClick={handleRunAnalysis}
            disabled={isScanning || !target}
            sx={{
              minWidth: 150,
              backgroundColor: "var(--accent)",
              color: "var(--bg)",
              "&:hover": { backgroundColor: "var(--accent-dark)" },
            }}
          >
            {isScanning ? (
              <CircularProgress size={24} sx={{ color: "var(--bg)" }} />
            ) : (
              "Run Security Analysis"
            )}
          </Button>
        </Box>

        {isScanning && (
          <Box mt={3}>
            <LinearProgress
              variant="determinate"
              value={progress}
              sx={{
                height: 8,
                borderRadius: 4,
                backgroundColor: "rgba(255,255,255,0.1)",
                "& .MuiLinearProgress-bar": {
                  backgroundColor: "var(--accent)",
                },
              }}
            />
            <Typography variant="caption" sx={{ color: "var(--text-light)", mt: 1, display: "block" }}>
              {progress.toFixed(0)}% Complete
            </Typography>
          </Box>
        )}
      </Paper>

      {report.length > 0 && (
        <Paper
          className="card"
          sx={{
            p: 4,
            mt: 3,
            backgroundColor: "var(--card)",
            border: "1px solid rgba(255,255,255,0.1)",
          }}
        >
          <Typography variant="h5" gutterBottom sx={{ color: "var(--accent)" }}>
            Analysis Report
          </Typography>
          <List>
            {report.map((item, i) => (
              <ListItem key={i} sx={{ borderBottom: "1px solid rgba(255,255,255,0.05)", py: 2 }}>
                <ListItemIcon sx={{ minWidth: 40, color: "var(--text)" }}>
                  {item.icon}
                </ListItemIcon>
                <ListItemText
                  primary={
                    <Typography component="span" sx={{ display: "flex", alignItems: "center", fontWeight: "bold", color: "var(--text)" }}>
                      <Box component="span" mr={1}>{item.name}</Box>
                      <Chip
                        label={item.status}
                        size="small"
                        sx={{
                          backgroundColor: item.status === "Secure" ? "green" : "red",
                          color: "#fff",
                          textTransform: "uppercase",
                          fontWeight: "bold",
                        }}
                      />
                    </Typography>
                  }
                  secondary={
                    <Typography component="span" sx={{ color: "var(--text-light)", mt: 1, display: "block" }}>
                      {item.details}
                    </Typography>
                  }
                />
              </ListItem>
            ))}
          </List>
        </Paper>
      )}
    </div>
  );
}